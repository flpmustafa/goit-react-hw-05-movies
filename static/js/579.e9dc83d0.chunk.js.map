{"version":3,"file":"static/js/579.e9dc83d0.chunk.js","mappings":"6OAyBA,EAtBoB,SAAAA,GAClB,IAAMC,EAAUD,EAChB,OACE,8BACGC,EAAQD,MAAQC,EAAQD,KAAKE,OAC5BD,EAAQD,KAAKG,KAAI,SAAAC,GAAM,OACrB,4BACE,8BAAMA,EAAOC,WACb,uBAAID,EAAOE,YAFHF,EAAOG,GADI,KAOvB,mEAIP,ECgBD,EA7BoB,WAClB,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOR,EAAP,KAAgBS,EAAhB,KACA,GAAgCD,EAAAA,EAAAA,WAAS,GAAzC,eAAOE,EAAP,KAAkBC,EAAlB,KAEMC,GAAkBC,EAAAA,EAAAA,UAiBxB,OAfAC,EAAAA,EAAAA,YAAU,WACRH,GAAW,IACXI,EAAAA,EAAAA,IAAWT,GACRU,MAAK,SAAAjB,GAAI,OAAIU,EAAWV,EAAf,IACTkB,OAAM,SAAUC,GACfC,QAAQC,IAAI,UAAYF,EACzB,IACAG,SAAQ,WACPC,YAAW,WACTX,GAAW,GACXC,EAAgBW,QAAQC,eAAe,CAAEC,SAAU,UACpD,GAAE,IACJ,GACJ,GAAE,CAACnB,KAGF,gBAAKoB,IAAKd,EAAV,SACGF,GAAY,SAACiB,EAAA,EAAD,KAAc,SAACC,EAAD,CAAa7B,KAAMC,KAGnD,C,8LC/BK6B,EAAU,+BACVC,EAAU,mCAIVC,EAAY,QAGZC,EAAc,mCAAG,sGACKC,EAAAA,EAAAA,IAAA,cACxBJ,EADwB,YALX,WAKW,YACDE,EADC,YAHT,MAGS,oBACkCD,EADlC,SADL,cACfI,EADe,OAIfC,EAASD,EAAYnC,KAAKqC,QAAQlC,KACtC,YACE,MAAO,CAAEI,GADmC,EAA3CA,GACY+B,MAD+B,EAAvCA,MACeC,YADwB,EAAhCA,YACqBC,aADW,EAAnBA,aAE1B,IAPkB,kBASdJ,GATc,2CAAH,qDAadK,EAAc,mCAAG,WAAMlC,GAAN,uFACF2B,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,YAAwBE,EAAxB,YAAqCzB,EAArC,oBAAmDwB,EAAnD,oBADE,cACjBW,EADiB,yBAEdA,EAAO1C,MAFO,2CAAH,sDAOd2C,EAAa,mCAAG,WAAMC,GAAN,uFACKV,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,YAFZ,SAEY,YAAkCE,EAAlC,oBAAuDD,EAAvD,4DAAkHa,IADvH,cACdC,EADc,yBAEbA,EAAW7C,KAAKqC,SAFH,2CAAH,sDAMbS,EAAQ,mCAAG,WAAMvC,GAAN,uFACK2B,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,YAAwBE,EAAxB,YAAqCzB,EAArC,4BAA2DwB,EAA3D,oBADL,cACTgB,EADS,yBAERA,EAAM/C,MAFE,2CAAH,sDAMRgB,EAAU,mCAAG,WAAMT,GAAN,yFACQ2B,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,YAAwBE,EAAxB,YAAqCzB,EAArC,4BAA2DwB,IADnE,cACXiB,EADW,OAEX/C,EAAU+C,EAAWhD,KAAKqC,QAAQlC,KAAI,YAC1C,MAAO,CAAEE,OAD8D,EAA1BA,OAC5BC,QADsD,EAAlBA,QAC3BC,GAD6C,EAATA,GAE/D,IAJgB,kBAKVN,GALU,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","pages/ReviewPage/ReviewPage.jsx","servises/api.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ReviewsList = data => {\n  const reviews = data;\n  return (\n    <>\n      {reviews.data && reviews.data.length ? (\n        reviews.data.map(review => (\n          <div key={review.id}>\n            <h3> {review.author}</h3>\n            <p>{review.content}</p>\n          </div>\n        ))\n      ) : (\n        <p> Sorry, no reviews have been added yet</p>\n      )}\n    </>\n  );\n};\n\nReviewsList.propTypes = {\n  data: PropTypes.array,\n};\n\nexport default ReviewsList;","import { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'servises/api';\nimport Spinner from 'components/Loader/Spinner';\nimport ReviewsList from 'components/Reviews/Reviews';\n\nconst ReviewsPage = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n\n  const reviewContainer = useRef();\n\n  useEffect(() => {\n    setLoading(true);\n    getReviews(id)\n      .then(data => setReviews(data))\n      .catch(function (error) {\n        console.log('Error: ' + error);\n      })\n      .finally(() => {\n        setTimeout(() => {\n          setLoading(false);\n          reviewContainer.current.scrollIntoView({ behavior: 'smooth' });\n        }, 500);\n      });\n  }, [id]);\n\n  return (\n    <div ref={reviewContainer}>\n      {isLoading ? <Spinner /> : <ReviewsList data={reviews} />}\n    </div>\n  );\n};\n\nexport default ReviewsPage;","import axios from 'axios';\n//const parameters\nconst API_URL = 'https://api.themoviedb.org/3'\nconst API_KEY = '29a0f9958f515e94b4a8a68d70519f1b';\n\n//Trends\nconst trending = 'trending';\nconst mediaType = 'movie';\nconst timeWindow = 'day';\n\nconst getFilmsTrends = async () => {\n  const filmsTrends = await axios.get(`\n  ${API_URL}/${trending}/${mediaType}/${timeWindow}?api_key=${API_KEY}\n  `);\n  const trends = filmsTrends.data.results.map(\n    ({ id, title, poster_path, vote_average }) => {\n      return { id, title, poster_path, vote_average };\n    }  \n      );\n  return trends;\n}\n\n    // Move Details\nconst getMoveDetails = async id => {\n  let moveId = await axios.get(`${API_URL}/${mediaType}/${id}?api_key=${API_KEY}&language=en-US`);\n  return moveId.data;\n};\n\n// Seach films\nconst search = 'search';\nconst getFilmsSeach = async query => { \n  const filmsSeach = await axios.get(`${API_URL}/${search}/${mediaType}?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`);\n  return filmsSeach.data.results;\n}\n\n// Cast\nconst getCasts = async id => {\n  const casts = await axios.get(`${API_URL}/${mediaType}/${id}/credits?api_key=${API_KEY}&language=en-US`);\n  return casts.data;\n};\n\n// Review\nconst getReviews = async id => {\n  const reviewsRes = await axios.get(`${API_URL}/${mediaType}/${id}/reviews?api_key=${API_KEY}`);\n  const reviews = reviewsRes.data.results.map(({ author, content, id }) => {\n    return { author, content, id };\n  });\n  return reviews;\n};\n\nexport { getFilmsTrends, getMoveDetails, getFilmsSeach, getCasts, getReviews };"],"names":["data","reviews","length","map","review","author","content","id","useParams","useState","setReviews","isLoading","setLoading","reviewContainer","useRef","useEffect","getReviews","then","catch","error","console","log","finally","setTimeout","current","scrollIntoView","behavior","ref","Spinner","Reviews","API_URL","API_KEY","mediaType","getFilmsTrends","axios","filmsTrends","trends","results","title","poster_path","vote_average","getMoveDetails","moveId","getFilmsSeach","query","filmsSeach","getCasts","casts","reviewsRes"],"sourceRoot":""}